from fastapi import APIRouter
from fastapi.responses import JSONResponse

router = APIRouter()


@router.get("/ips/obtenerresolucionAF/{rut}")
async def testipsobtenerresolucionAF(rut: str):
    return JSONResponse(content={
        "codigoRetorno": 0,
        "glosaRetorno": "SE ENCONTRON DOCUMENTOS",
        "idRequerimiento": 12345678,
        "resultado": [
            {
                "solicitudId": 12345678,
                "beneficioId": 12345678,
                "descripcion": "Resolucion Asignacion Familiar.pdf",
                "idRepositorio": "[REDACTED]",
                "idRepositorioFinal": "[REDACTED]",
                "fecCreacionAno": 2001,
                "fecCreacionMes": 01,
                "base64File": "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",
            }
        ],
        "timestamp": "2025-09-15T17:58:53.176-03:00",
    })
